// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model book  {
  id String @id @default(cuid())
  title String
  author String
  published DateTime @db.Timestamptz(0)
  isbn String
  createdAt DateTime @default(now()) @db.Timestamptz(0)
  updatedAt DateTime @updatedAt @db.Timestamptz(0)
  loans bookloan[]
  @@index([isbn])
}



model member {
  id String @id @default(cuid())
  name String
  email String @unique
  phone String?
  createdAt DateTime @default(now()) @db.Timestamptz(0)
  updatedAt DateTime @updatedAt @db.Timestamptz(0)
  loans bookloan[]
  @@index([email])
}

model bookloan {
  id String @id @default(cuid())
  bookId String
  memberId String
  loanDate DateTime @db.Timestamptz(0)
  dueDate DateTime @db.Timestamptz(0)
  returnDate DateTime? @db.Timestamptz(0)
  status Status
  createdAt DateTime @default(now()) @db.Timestamptz(0)
  updatedAt DateTime @updatedAt @db.Timestamptz(0)
  book book @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  member member @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([bookId, memberId])
}

enum Status {
 ACTIVE
 RETURNED
 OVERDUE
}
